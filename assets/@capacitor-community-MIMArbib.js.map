{"version":3,"mappings":"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","names":["CameraDirection","BarcodeScanner","registerPlugin","__vitePreload","m","SpeechRecognition","SQLiteConnection","sqlite","err","database","overwrite","mOverwrite","value","res","passphrase","oldpassphrase","upgrade","encrypted","mode","version","readonly","conn","SQLiteDBConnection","connName","path","databasePath","delDict","key","keys","openModes","dbNames","jsonstring","ret","url","values","folderPath","dbNameList","dbList","dbName","changes","result","toggle","statements","transaction","isSQL92","statement","returnMode","set","table","syncdate","retDate","txn","isActive","task","retMode","retC","retChanges","msg","retRes","columnList","iosRes","i","rowJson","resRowJson","item","CapacitorSQLite","BarcodeScannerWeb","WebPlugin","_options","_a","format","BarcodeFormat","_callback","permission","videoElement","resolve","hints","DecodeHintType","reader","BrowserQRCodeReader","error","controls","reject","stream","track","body","parent","userAgent","constraints","tracks","SpeechRecognitionWeb","CapacitorSQLiteWeb","event","options"],"ignoreList":[0,1,2,3,4,5,6,7],"sources":["../../node_modules/@capacitor-community/barcode-scanner/dist/esm/definitions.js","../../node_modules/@capacitor-community/barcode-scanner/dist/esm/index.js","../../node_modules/@capacitor-community/speech-recognition/dist/esm/index.js","../../node_modules/@capacitor-community/sqlite/dist/esm/definitions.js","../../node_modules/@capacitor-community/sqlite/dist/esm/index.js","../../node_modules/@capacitor-community/barcode-scanner/dist/esm/web.js","../../node_modules/@capacitor-community/speech-recognition/dist/esm/web.js","../../node_modules/@capacitor-community/sqlite/dist/esm/web.js"],"sourcesContent":["const _SupportedFormat = {\n    // BEGIN 1D Product\n    /**\n     * Android only, UPC_A is part of EAN_13 according to Apple docs\n     */\n    UPC_A: 'UPC_A',\n    UPC_E: 'UPC_E',\n    /**\n     * Android only\n     */\n    UPC_EAN_EXTENSION: 'UPC_EAN_EXTENSION',\n    EAN_8: 'EAN_8',\n    EAN_13: 'EAN_13',\n    // END 1D Product\n    // BEGIN 1D Industrial\n    CODE_39: 'CODE_39',\n    /**\n     * iOS only\n     */\n    CODE_39_MOD_43: 'CODE_39_MOD_43',\n    CODE_93: 'CODE_93',\n    CODE_128: 'CODE_128',\n    /**\n     * Android only\n     */\n    CODABAR: 'CODABAR',\n    ITF: 'ITF',\n    /**\n     * iOS only\n     */\n    ITF_14: 'ITF_14',\n    // END 1D Industrial\n    // BEGIN 2D\n    AZTEC: 'AZTEC',\n    DATA_MATRIX: 'DATA_MATRIX',\n    /**\n     * Android only\n     */\n    MAXICODE: 'MAXICODE',\n    PDF_417: 'PDF_417',\n    QR_CODE: 'QR_CODE',\n    /**\n     * Android only\n     */\n    RSS_14: 'RSS_14',\n    /**\n     * Android only\n     */\n    RSS_EXPANDED: 'RSS_EXPANDED',\n    // END 2D\n};\nexport const SupportedFormat = _SupportedFormat;\nexport const CameraDirection = {\n    FRONT: 'front',\n    BACK: 'back',\n};\n//# sourceMappingURL=definitions.js.map","import { registerPlugin } from '@capacitor/core';\nconst BarcodeScanner = registerPlugin('BarcodeScanner', {\n    web: () => import('./web').then(m => new m.BarcodeScannerWeb()),\n});\nexport * from './definitions';\nexport { BarcodeScanner };\n//# sourceMappingURL=index.js.map","import { registerPlugin } from '@capacitor/core';\nconst SpeechRecognition = registerPlugin('SpeechRecognition', {\n    web: () => import('./web').then(m => new m.SpeechRecognitionWeb()),\n});\nexport * from './definitions';\nexport { SpeechRecognition };\n//# sourceMappingURL=index.js.map","//import { Capacitor } from '@capacitor/core';\n/**\n * SQLiteConnection Class\n */\nexport class SQLiteConnection {\n    constructor(sqlite) {\n        this.sqlite = sqlite;\n        this._connectionDict = new Map();\n    }\n    async initWebStore() {\n        try {\n            await this.sqlite.initWebStore();\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async saveToStore(database) {\n        try {\n            await this.sqlite.saveToStore({ database });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async saveToLocalDisk(database) {\n        try {\n            await this.sqlite.saveToLocalDisk({ database });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getFromLocalDiskToStore(overwrite) {\n        const mOverwrite = overwrite != null ? overwrite : true;\n        try {\n            await this.sqlite.getFromLocalDiskToStore({ overwrite: mOverwrite });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async echo(value) {\n        try {\n            const res = await this.sqlite.echo({ value });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isSecretStored() {\n        try {\n            const res = await this.sqlite.isSecretStored();\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async setEncryptionSecret(passphrase) {\n        try {\n            await this.sqlite.setEncryptionSecret({ passphrase: passphrase });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async changeEncryptionSecret(passphrase, oldpassphrase) {\n        try {\n            await this.sqlite.changeEncryptionSecret({\n                passphrase: passphrase,\n                oldpassphrase: oldpassphrase,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async clearEncryptionSecret() {\n        try {\n            await this.sqlite.clearEncryptionSecret();\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async checkEncryptionSecret(passphrase) {\n        try {\n            const res = await this.sqlite.checkEncryptionSecret({\n                passphrase: passphrase,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async addUpgradeStatement(database, upgrade) {\n        try {\n            if (database.endsWith('.db'))\n                database = database.slice(0, -3);\n            await this.sqlite.addUpgradeStatement({\n                database,\n                upgrade,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async createConnection(database, encrypted, mode, version, readonly) {\n        try {\n            if (database.endsWith('.db'))\n                database = database.slice(0, -3);\n            await this.sqlite.createConnection({\n                database,\n                encrypted,\n                mode,\n                version,\n                readonly,\n            });\n            const conn = new SQLiteDBConnection(database, readonly, this.sqlite);\n            const connName = readonly ? `RO_${database}` : `RW_${database}`;\n            this._connectionDict.set(connName, conn);\n            /*\n            console.log(`*** in createConnection connectionDict: ***`)\n            this._connectionDict.forEach((connection, key) => {\n              console.log(`Key: ${key}, Value: ${connection}`);\n            });\n      */\n            return Promise.resolve(conn);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async closeConnection(database, readonly) {\n        try {\n            if (database.endsWith('.db'))\n                database = database.slice(0, -3);\n            await this.sqlite.closeConnection({ database, readonly });\n            const connName = readonly ? `RO_${database}` : `RW_${database}`;\n            this._connectionDict.delete(connName);\n            /*      console.log(`*** in closeConnection connectionDict: ***`)\n            this._connectionDict.forEach((connection, key) => {\n              console.log(`Key: ${key}, Value: ${connection}`);\n            });\n      */\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isConnection(database, readonly) {\n        const res = {};\n        if (database.endsWith('.db'))\n            database = database.slice(0, -3);\n        const connName = readonly ? `RO_${database}` : `RW_${database}`;\n        res.result = this._connectionDict.has(connName);\n        return Promise.resolve(res);\n    }\n    async retrieveConnection(database, readonly) {\n        if (database.endsWith('.db'))\n            database = database.slice(0, -3);\n        const connName = readonly ? `RO_${database}` : `RW_${database}`;\n        if (this._connectionDict.has(connName)) {\n            const conn = this._connectionDict.get(connName);\n            if (typeof conn != 'undefined')\n                return Promise.resolve(conn);\n            else {\n                return Promise.reject(`Connection ${database} is undefined`);\n            }\n        }\n        else {\n            return Promise.reject(`Connection ${database} does not exist`);\n        }\n    }\n    async getNCDatabasePath(path, database) {\n        try {\n            const databasePath = await this.sqlite.getNCDatabasePath({\n                path,\n                database,\n            });\n            return Promise.resolve(databasePath);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async createNCConnection(databasePath, version) {\n        try {\n            await this.sqlite.createNCConnection({\n                databasePath,\n                version,\n            });\n            const conn = new SQLiteDBConnection(databasePath, true, this.sqlite);\n            const connName = `RO_${databasePath})`;\n            this._connectionDict.set(connName, conn);\n            return Promise.resolve(conn);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async closeNCConnection(databasePath) {\n        try {\n            await this.sqlite.closeNCConnection({ databasePath });\n            const connName = `RO_${databasePath})`;\n            this._connectionDict.delete(connName);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isNCConnection(databasePath) {\n        const res = {};\n        const connName = `RO_${databasePath})`;\n        res.result = this._connectionDict.has(connName);\n        return Promise.resolve(res);\n    }\n    async retrieveNCConnection(databasePath) {\n        if (this._connectionDict.has(databasePath)) {\n            const connName = `RO_${databasePath})`;\n            const conn = this._connectionDict.get(connName);\n            if (typeof conn != 'undefined')\n                return Promise.resolve(conn);\n            else {\n                return Promise.reject(`Connection ${databasePath} is undefined`);\n            }\n        }\n        else {\n            return Promise.reject(`Connection ${databasePath} does not exist`);\n        }\n    }\n    async isNCDatabase(databasePath) {\n        try {\n            const res = await this.sqlite.isNCDatabase({ databasePath });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async retrieveAllConnections() {\n        return this._connectionDict;\n    }\n    async closeAllConnections() {\n        const delDict = new Map();\n        try {\n            /*      console.log(`*** in closeAllConnections connectionDict: ***`)\n            this._connectionDict.forEach((connection, key) => {\n              console.log(`Key: ${key}, Value: ${connection}`);\n            });\n      */\n            for (const key of this._connectionDict.keys()) {\n                const database = key.substring(3);\n                const readonly = key.substring(0, 3) === 'RO_' ? true : false;\n                await this.sqlite.closeConnection({ database, readonly });\n                delDict.set(key, null);\n            }\n            for (const key of delDict.keys()) {\n                this._connectionDict.delete(key);\n            }\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async checkConnectionsConsistency() {\n        try {\n            const keys = [...this._connectionDict.keys()];\n            const openModes = [];\n            const dbNames = [];\n            for (const key of keys) {\n                openModes.push(key.substring(0, 2));\n                dbNames.push(key.substring(3));\n            }\n            const res = await this.sqlite.checkConnectionsConsistency({\n                dbNames: dbNames,\n                openModes: openModes,\n            });\n            if (!res.result)\n                this._connectionDict = new Map();\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            this._connectionDict = new Map();\n            return Promise.reject(err);\n        }\n    }\n    async importFromJson(jsonstring) {\n        try {\n            const ret = await this.sqlite.importFromJson({ jsonstring: jsonstring });\n            return Promise.resolve(ret);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isJsonValid(jsonstring) {\n        try {\n            const ret = await this.sqlite.isJsonValid({ jsonstring: jsonstring });\n            return Promise.resolve(ret);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async copyFromAssets(overwrite) {\n        const mOverwrite = overwrite != null ? overwrite : true;\n        try {\n            await this.sqlite.copyFromAssets({ overwrite: mOverwrite });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getFromHTTPRequest(url, overwrite) {\n        const mOverwrite = overwrite != null ? overwrite : true;\n        try {\n            await this.sqlite.getFromHTTPRequest({ url, overwrite: mOverwrite });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isDatabaseEncrypted(database) {\n        if (database.endsWith('.db'))\n            database = database.slice(0, -3);\n        try {\n            const res = await this.sqlite.isDatabaseEncrypted({ database: database });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isInConfigEncryption() {\n        try {\n            const res = await this.sqlite.isInConfigEncryption();\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isInConfigBiometricAuth() {\n        try {\n            const res = await this.sqlite.isInConfigBiometricAuth();\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isDatabase(database) {\n        if (database.endsWith('.db'))\n            database = database.slice(0, -3);\n        try {\n            const res = await this.sqlite.isDatabase({ database: database });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getDatabaseList() {\n        try {\n            const res = await this.sqlite.getDatabaseList();\n            const values = res.values;\n            values.sort();\n            const ret = { values: values };\n            return Promise.resolve(ret);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getMigratableDbList(folderPath) {\n        const path = folderPath ? folderPath : 'default';\n        try {\n            const res = await this.sqlite.getMigratableDbList({\n                folderPath: path,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async addSQLiteSuffix(folderPath, dbNameList) {\n        const path = folderPath ? folderPath : 'default';\n        const dbList = dbNameList ? dbNameList : [];\n        try {\n            const res = await this.sqlite.addSQLiteSuffix({\n                folderPath: path,\n                dbNameList: dbList,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async deleteOldDatabases(folderPath, dbNameList) {\n        const path = folderPath ? folderPath : 'default';\n        const dbList = dbNameList ? dbNameList : [];\n        try {\n            const res = await this.sqlite.deleteOldDatabases({\n                folderPath: path,\n                dbNameList: dbList,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async moveDatabasesAndAddSuffix(folderPath, dbNameList) {\n        const path = folderPath ? folderPath : 'default';\n        const dbList = dbNameList ? dbNameList : [];\n        return this.sqlite.moveDatabasesAndAddSuffix({\n            folderPath: path,\n            dbNameList: dbList,\n        });\n    }\n}\n/**\n * SQLiteDBConnection Class\n */\nexport class SQLiteDBConnection {\n    constructor(dbName, readonly, sqlite) {\n        this.dbName = dbName;\n        this.readonly = readonly;\n        this.sqlite = sqlite;\n    }\n    getConnectionDBName() {\n        return this.dbName;\n    }\n    getConnectionReadOnly() {\n        return this.readonly;\n    }\n    async open() {\n        try {\n            await this.sqlite.open({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async close() {\n        try {\n            await this.sqlite.close({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async beginTransaction() {\n        try {\n            const changes = await this.sqlite.beginTransaction({\n                database: this.dbName,\n            });\n            return Promise.resolve(changes);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async commitTransaction() {\n        try {\n            const changes = await this.sqlite.commitTransaction({\n                database: this.dbName,\n            });\n            return Promise.resolve(changes);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async rollbackTransaction() {\n        try {\n            const changes = await this.sqlite.rollbackTransaction({\n                database: this.dbName,\n            });\n            return Promise.resolve(changes);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isTransactionActive() {\n        try {\n            const result = await this.sqlite.isTransactionActive({\n                database: this.dbName,\n            });\n            return Promise.resolve(result);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async loadExtension(path) {\n        try {\n            await this.sqlite.loadExtension({\n                database: this.dbName,\n                path: path,\n                readonly: this.readonly,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async enableLoadExtension(toggle) {\n        try {\n            await this.sqlite.enableLoadExtension({\n                database: this.dbName,\n                toggle: toggle,\n                readonly: this.readonly,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getUrl() {\n        try {\n            const res = await this.sqlite.getUrl({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getVersion() {\n        try {\n            const version = await this.sqlite.getVersion({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve(version);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getTableList() {\n        try {\n            const res = await this.sqlite.getTableList({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async execute(statements, transaction = true, isSQL92 = true) {\n        try {\n            if (!this.readonly) {\n                const res = await this.sqlite.execute({\n                    database: this.dbName,\n                    statements: statements,\n                    transaction: transaction,\n                    readonly: false,\n                    isSQL92: isSQL92,\n                });\n                return Promise.resolve(res);\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async query(statement, values, isSQL92 = true) {\n        let res;\n        try {\n            if (values && values.length > 0) {\n                res = await this.sqlite.query({\n                    database: this.dbName,\n                    statement: statement,\n                    values: values,\n                    readonly: this.readonly,\n                    isSQL92: true,\n                });\n            }\n            else {\n                res = await this.sqlite.query({\n                    database: this.dbName,\n                    statement: statement,\n                    values: [],\n                    readonly: this.readonly,\n                    isSQL92: isSQL92,\n                });\n            }\n            // reorder rows for ios\n            res = await this.reorderRows(res);\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async run(statement, values, transaction = true, returnMode = 'no', isSQL92 = true) {\n        let res;\n        try {\n            if (!this.readonly) {\n                if (values && values.length > 0) {\n                    res = await this.sqlite.run({\n                        database: this.dbName,\n                        statement: statement,\n                        values: values,\n                        transaction: transaction,\n                        readonly: false,\n                        returnMode: returnMode,\n                        isSQL92: true,\n                    });\n                }\n                else {\n                    res = await this.sqlite.run({\n                        database: this.dbName,\n                        statement: statement,\n                        values: [],\n                        transaction: transaction,\n                        readonly: false,\n                        returnMode: returnMode,\n                        isSQL92: isSQL92,\n                    });\n                }\n                // reorder rows for ios\n                res.changes = await this.reorderRows(res.changes);\n                return Promise.resolve(res);\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async executeSet(set, transaction = true, returnMode = 'no', isSQL92 = true) {\n        let res;\n        try {\n            if (!this.readonly) {\n                res = await this.sqlite.executeSet({\n                    database: this.dbName,\n                    set: set,\n                    transaction: transaction,\n                    readonly: false,\n                    returnMode: returnMode,\n                    isSQL92: isSQL92,\n                });\n                //      }\n                // reorder rows for ios\n                res.changes = await this.reorderRows(res.changes);\n                return Promise.resolve(res);\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isExists() {\n        try {\n            const res = await this.sqlite.isDBExists({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isTable(table) {\n        try {\n            const res = await this.sqlite.isTableExists({\n                database: this.dbName,\n                table: table,\n                readonly: this.readonly,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isDBOpen() {\n        try {\n            const res = await this.sqlite.isDBOpen({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async delete() {\n        try {\n            if (!this.readonly) {\n                await this.sqlite.deleteDatabase({\n                    database: this.dbName,\n                    readonly: false,\n                });\n                return Promise.resolve();\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async createSyncTable() {\n        try {\n            if (!this.readonly) {\n                const res = await this.sqlite.createSyncTable({\n                    database: this.dbName,\n                    readonly: false,\n                });\n                return Promise.resolve(res);\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async setSyncDate(syncdate) {\n        try {\n            if (!this.readonly) {\n                await this.sqlite.setSyncDate({\n                    database: this.dbName,\n                    syncdate: syncdate,\n                    readonly: false,\n                });\n                return Promise.resolve();\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getSyncDate() {\n        try {\n            const res = await this.sqlite.getSyncDate({\n                database: this.dbName,\n                readonly: this.readonly,\n            });\n            let retDate = '';\n            if (res.syncDate > 0)\n                retDate = new Date(res.syncDate * 1000).toISOString();\n            return Promise.resolve(retDate);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async exportToJson(mode, encrypted = false) {\n        try {\n            const res = await this.sqlite.exportToJson({\n                database: this.dbName,\n                jsonexportmode: mode,\n                readonly: this.readonly,\n                encrypted: encrypted,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async deleteExportedRows() {\n        try {\n            if (!this.readonly) {\n                await this.sqlite.deleteExportedRows({\n                    database: this.dbName,\n                    readonly: false,\n                });\n                return Promise.resolve();\n            }\n            else {\n                return Promise.reject('not allowed in read-only mode');\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async executeTransaction(txn, isSQL92 = true) {\n        let changes = 0;\n        let isActive = false;\n        if (!this.readonly) {\n            await this.sqlite.beginTransaction({\n                database: this.dbName,\n            });\n            isActive = await this.sqlite.isTransactionActive({\n                database: this.dbName,\n            });\n            if (!isActive) {\n                return Promise.reject('After Begin Transaction, no transaction active');\n            }\n            try {\n                for (const task of txn) {\n                    if (typeof task !== 'object' || !('statement' in task)) {\n                        throw new Error('Error a task.statement must be provided');\n                    }\n                    if ('values' in task && task.values && task.values.length > 0) {\n                        const retMode = task.statement.toUpperCase().includes('RETURNING')\n                            ? 'all'\n                            : 'no';\n                        const ret = await this.sqlite.run({\n                            database: this.dbName,\n                            statement: task.statement,\n                            values: task.values,\n                            transaction: false,\n                            readonly: false,\n                            returnMode: retMode,\n                            isSQL92: isSQL92,\n                        });\n                        if (ret.changes.changes < 0) {\n                            throw new Error('Error in transaction method run ');\n                        }\n                        changes += ret.changes.changes;\n                    }\n                    else {\n                        const ret = await this.sqlite.execute({\n                            database: this.dbName,\n                            statements: task.statement,\n                            transaction: false,\n                            readonly: false,\n                        });\n                        if (ret.changes.changes < 0) {\n                            throw new Error('Error in transaction method execute ');\n                        }\n                        changes += ret.changes.changes;\n                    }\n                }\n                // commit\n                const retC = await this.sqlite.commitTransaction({\n                    database: this.dbName,\n                });\n                changes += retC.changes.changes;\n                const retChanges = { changes: { changes: changes } };\n                return Promise.resolve(retChanges);\n            }\n            catch (err) {\n                // rollback\n                const msg = err.message ? err.message : err;\n                await this.sqlite.rollbackTransaction({\n                    database: this.dbName,\n                });\n                return Promise.reject(msg);\n            }\n        }\n        else {\n            return Promise.reject('not allowed in read-only mode');\n        }\n    }\n    async reorderRows(res) {\n        const retRes = res;\n        if (res?.values && typeof res.values[0] === 'object') {\n            if (Object.keys(res.values[0]).includes('ios_columns')) {\n                const columnList = res.values[0]['ios_columns'];\n                const iosRes = [];\n                for (let i = 1; i < res.values.length; i++) {\n                    const rowJson = res.values[i];\n                    const resRowJson = {};\n                    for (const item of columnList) {\n                        resRowJson[item] = rowJson[item];\n                    }\n                    iosRes.push(resRowJson);\n                }\n                retRes['values'] = iosRes;\n            }\n        }\n        return Promise.resolve(retRes);\n    }\n}\n//# sourceMappingURL=definitions.js.map","import { registerPlugin } from '@capacitor/core';\nconst CapacitorSQLite = registerPlugin('CapacitorSQLite', {\n    web: () => import('./web').then(m => new m.CapacitorSQLiteWeb()),\n    electron: () => window.CapacitorCustomPlatform.plugins.CapacitorSQLite,\n});\nexport { CapacitorSQLite };\nexport * from './definitions';\n//# sourceMappingURL=index.js.map","import { WebPlugin } from '@capacitor/core';\nimport { BarcodeFormat, BrowserQRCodeReader } from '@zxing/browser';\nimport { DecodeHintType } from '@zxing/library';\nimport { CameraDirection, } from './definitions';\nexport class BarcodeScannerWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this._formats = [];\n        this._controls = null;\n        this._torchState = false;\n        this._video = null;\n        this._options = null;\n        this._backgroundColor = null;\n    }\n    async prepare() {\n        await this._getVideoElement();\n        return;\n    }\n    async hideBackground() {\n        this._backgroundColor = document.documentElement.style.backgroundColor;\n        document.documentElement.style.backgroundColor = 'transparent';\n        return;\n    }\n    async showBackground() {\n        document.documentElement.style.backgroundColor = this._backgroundColor || '';\n        return;\n    }\n    async startScan(_options) {\n        var _a;\n        this._options = _options;\n        this._formats = [];\n        (_a = _options === null || _options === void 0 ? void 0 : _options.targetedFormats) === null || _a === void 0 ? void 0 : _a.forEach((format) => {\n            const formatIndex = Object.keys(BarcodeFormat).indexOf(format);\n            if (formatIndex >= 0) {\n                this._formats.push(0);\n            }\n            else {\n                console.error(format, 'is not supported on web');\n            }\n        });\n        const video = await this._getVideoElement();\n        if (video) {\n            return await this._getFirstResultFromReader();\n        }\n        else {\n            throw this.unavailable('Missing video element');\n        }\n    }\n    async startScanning(_options, _callback) {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async pauseScanning() {\n        if (this._controls) {\n            this._controls.stop();\n            this._controls = null;\n        }\n    }\n    async resumeScanning() {\n        this._getFirstResultFromReader();\n    }\n    async stopScan(_options) {\n        this._stop();\n        if (this._controls) {\n            this._controls.stop();\n            this._controls = null;\n        }\n    }\n    async checkPermission(_options) {\n        if (typeof navigator === 'undefined' || !navigator.permissions) {\n            throw this.unavailable('Permissions API not available in this browser');\n        }\n        try {\n            // https://developer.mozilla.org/en-US/docs/Web/API/Permissions/query\n            // the specific permissions that are supported varies among browsers that implement the\n            // permissions API, so we need a try/catch in case 'camera' is invalid\n            const permission = await window.navigator.permissions.query({\n                name: 'camera',\n            });\n            if (permission.state === 'prompt') {\n                return {\n                    neverAsked: true,\n                };\n            }\n            if (permission.state === 'denied') {\n                return {\n                    denied: true,\n                };\n            }\n            if (permission.state === 'granted') {\n                return {\n                    granted: true,\n                };\n            }\n            return {\n                unknown: true,\n            };\n        }\n        catch (_a) {\n            throw this.unavailable('Camera permissions are not available in this browser');\n        }\n    }\n    async openAppSettings() {\n        throw this.unavailable('App settings are not available in this browser');\n    }\n    async disableTorch() {\n        if (this._controls && this._controls.switchTorch) {\n            this._controls.switchTorch(false);\n            this._torchState = false;\n        }\n    }\n    async enableTorch() {\n        if (this._controls && this._controls.switchTorch) {\n            this._controls.switchTorch(true);\n            this._torchState = true;\n        }\n    }\n    async toggleTorch() {\n        if (this._controls && this._controls.switchTorch) {\n            this._controls.switchTorch(true);\n        }\n    }\n    async getTorchState() {\n        return { isEnabled: this._torchState };\n    }\n    async _getVideoElement() {\n        if (!this._video) {\n            await this._startVideo();\n        }\n        return this._video;\n    }\n    async _getFirstResultFromReader() {\n        const videoElement = await this._getVideoElement();\n        return new Promise(async (resolve) => {\n            if (videoElement) {\n                let hints;\n                if (this._formats.length) {\n                    hints = new Map();\n                    hints.set(DecodeHintType.POSSIBLE_FORMATS, this._formats);\n                }\n                const reader = new BrowserQRCodeReader(hints);\n                this._controls = await reader.decodeFromVideoElement(videoElement, (result, error, controls) => {\n                    if (!error && result && result.getText()) {\n                        resolve({\n                            hasContent: true,\n                            content: result.getText(),\n                            format: result.getBarcodeFormat().toString(),\n                        });\n                        controls.stop();\n                        this._controls = null;\n                        this._stop();\n                    }\n                    if (error && error.message) {\n                        console.error(error.message);\n                    }\n                });\n            }\n        });\n    }\n    async _startVideo() {\n        return new Promise(async (resolve, reject) => {\n            var _a;\n            await navigator.mediaDevices\n                .getUserMedia({\n                audio: false,\n                video: true,\n            })\n                .then((stream) => {\n                // Stop any existing stream so we can request media with different constraints based on user input\n                stream.getTracks().forEach((track) => track.stop());\n            })\n                .catch((error) => {\n                reject(error);\n            });\n            const body = document.body;\n            const video = document.getElementById('video');\n            if (!video) {\n                const parent = document.createElement('div');\n                parent.setAttribute('style', 'position:absolute; top: 0; left: 0; width:100%; height: 100%; background-color: black;');\n                this._video = document.createElement('video');\n                this._video.id = 'video';\n                // Don't flip video feed if camera is rear facing\n                if (((_a = this._options) === null || _a === void 0 ? void 0 : _a.cameraDirection) !== CameraDirection.BACK) {\n                    this._video.setAttribute('style', '-webkit-transform: scaleX(-1); transform: scaleX(-1); width:100%; height: 100%;');\n                }\n                else {\n                    this._video.setAttribute('style', 'width:100%; height: 100%;');\n                }\n                const userAgent = navigator.userAgent.toLowerCase();\n                const isSafari = userAgent.includes('safari') && !userAgent.includes('chrome');\n                // Safari on iOS needs to have the autoplay, muted and playsinline attributes set for video.play() to be successful\n                // Without these attributes this.video.play() will throw a NotAllowedError\n                // https://developer.apple.com/documentation/webkit/delivering_video_content_for_safari\n                if (isSafari) {\n                    this._video.setAttribute('autoplay', 'true');\n                    this._video.setAttribute('muted', 'true');\n                    this._video.setAttribute('playsinline', 'true');\n                }\n                parent.appendChild(this._video);\n                body.appendChild(parent);\n                if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n                    const constraints = {\n                        video: {},\n                    };\n                    navigator.mediaDevices.getUserMedia(constraints).then((stream) => {\n                        //video.src = window.URL.createObjectURL(stream);\n                        if (this._video) {\n                            this._video.srcObject = stream;\n                            this._video.play();\n                        }\n                        resolve({});\n                    }, (err) => {\n                        reject(err);\n                    });\n                }\n            }\n            else {\n                reject({ message: 'camera already started' });\n            }\n        });\n    }\n    async _stop() {\n        var _a;\n        if (this._video) {\n            this._video.pause();\n            const st = this._video.srcObject;\n            const tracks = st.getTracks();\n            for (var i = 0; i < tracks.length; i++) {\n                var track = tracks[i];\n                track.stop();\n            }\n            (_a = this._video.parentElement) === null || _a === void 0 ? void 0 : _a.remove();\n            this._video = null;\n        }\n    }\n}\n//# sourceMappingURL=web.js.map","import { WebPlugin } from '@capacitor/core';\nexport class SpeechRecognitionWeb extends WebPlugin {\n    available() {\n        throw this.unimplemented('Method not implemented on web.');\n    }\n    start(_options) {\n        throw this.unimplemented('Method not implemented on web.');\n    }\n    stop() {\n        throw this.unimplemented('Method not implemented on web.');\n    }\n    getSupportedLanguages() {\n        throw this.unimplemented('Method not implemented on web.');\n    }\n    hasPermission() {\n        throw this.unimplemented('Method not implemented on web.');\n    }\n    isListening() {\n        throw this.unimplemented('Method not implemented on web.');\n    }\n    requestPermission() {\n        throw this.unimplemented('Method not implemented on web.');\n    }\n    checkPermissions() {\n        throw this.unimplemented('Method not implemented on web.');\n    }\n    requestPermissions() {\n        throw this.unimplemented('Method not implemented on web.');\n    }\n}\nconst SpeechRecognition = new SpeechRecognitionWeb();\nexport { SpeechRecognition };\n//# sourceMappingURL=web.js.map","import { WebPlugin } from '@capacitor/core';\nexport class CapacitorSQLiteWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.jeepSqliteElement = null;\n        this.isWebStoreOpen = false;\n    }\n    async initWebStore() {\n        await customElements.whenDefined('jeep-sqlite');\n        this.jeepSqliteElement = document.querySelector('jeep-sqlite');\n        this.ensureJeepSqliteIsAvailable();\n        this.jeepSqliteElement.addEventListener('jeepSqliteImportProgress', (event) => {\n            this.notifyListeners('sqliteImportProgressEvent', event.detail);\n        });\n        this.jeepSqliteElement.addEventListener('jeepSqliteExportProgress', (event) => {\n            this.notifyListeners('sqliteExportProgressEvent', event.detail);\n        });\n        this.jeepSqliteElement.addEventListener('jeepSqliteHTTPRequestEnded', (event) => {\n            this.notifyListeners('sqliteHTTPRequestEndedEvent', event.detail);\n        });\n        this.jeepSqliteElement.addEventListener('jeepSqlitePickDatabaseEnded', (event) => {\n            this.notifyListeners('sqlitePickDatabaseEndedEvent', event.detail);\n        });\n        this.jeepSqliteElement.addEventListener('jeepSqliteSaveDatabaseToDisk', (event) => {\n            this.notifyListeners('sqliteSaveDatabaseToDiskEvent', event.detail);\n        });\n        if (!this.isWebStoreOpen) {\n            this.isWebStoreOpen = await this.jeepSqliteElement.isStoreOpen();\n        }\n        return;\n    }\n    async saveToStore(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.saveToStore(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getFromLocalDiskToStore(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.getFromLocalDiskToStore(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async saveToLocalDisk(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.saveToLocalDisk(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async echo(options) {\n        this.ensureJeepSqliteIsAvailable();\n        const echoResult = await this.jeepSqliteElement.echo(options);\n        return echoResult;\n    }\n    async createConnection(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.createConnection(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async open(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.open(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async closeConnection(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.closeConnection(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getVersion(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const versionResult = await this.jeepSqliteElement.getVersion(options);\n            return versionResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async checkConnectionsConsistency(options) {\n        this.ensureJeepSqliteIsAvailable();\n        try {\n            const consistencyResult = await this.jeepSqliteElement.checkConnectionsConsistency(options);\n            return consistencyResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async close(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.close(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async beginTransaction(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const changes = await this.jeepSqliteElement.beginTransaction(options);\n            return changes;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async commitTransaction(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const changes = await this.jeepSqliteElement.commitTransaction(options);\n            return changes;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async rollbackTransaction(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const changes = await this.jeepSqliteElement.rollbackTransaction(options);\n            return changes;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isTransactionActive(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const result = await this.jeepSqliteElement.isTransactionActive(options);\n            return result;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getTableList(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const tableListResult = await this.jeepSqliteElement.getTableList(options);\n            return tableListResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async execute(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const executeResult = await this.jeepSqliteElement.execute(options);\n            return executeResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async executeSet(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const executeResult = await this.jeepSqliteElement.executeSet(options);\n            return executeResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async run(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const runResult = await this.jeepSqliteElement.run(options);\n            return runResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async query(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const queryResult = await this.jeepSqliteElement.query(options);\n            return queryResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isDBExists(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const dbExistsResult = await this.jeepSqliteElement.isDBExists(options);\n            return dbExistsResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isDBOpen(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const isDBOpenResult = await this.jeepSqliteElement.isDBOpen(options);\n            return isDBOpenResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isDatabase(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const isDatabaseResult = await this.jeepSqliteElement.isDatabase(options);\n            return isDatabaseResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isTableExists(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const tableExistsResult = await this.jeepSqliteElement.isTableExists(options);\n            return tableExistsResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async deleteDatabase(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.deleteDatabase(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isJsonValid(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const isJsonValidResult = await this.jeepSqliteElement.isJsonValid(options);\n            return isJsonValidResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async importFromJson(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const importFromJsonResult = await this.jeepSqliteElement.importFromJson(options);\n            return importFromJsonResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async exportToJson(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const exportToJsonResult = await this.jeepSqliteElement.exportToJson(options);\n            return exportToJsonResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async createSyncTable(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const createSyncTableResult = await this.jeepSqliteElement.createSyncTable(options);\n            return createSyncTableResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async setSyncDate(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.setSyncDate(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getSyncDate(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const getSyncDateResult = await this.jeepSqliteElement.getSyncDate(options);\n            return getSyncDateResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async deleteExportedRows(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.deleteExportedRows(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async addUpgradeStatement(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.addUpgradeStatement(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async copyFromAssets(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.copyFromAssets(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getFromHTTPRequest(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.getFromHTTPRequest(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getDatabaseList() {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const databaseListResult = await this.jeepSqliteElement.getDatabaseList();\n            return databaseListResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    /**\n     * Checks if the `jeep-sqlite` element is present in the DOM.\n     * If it's not in the DOM, this method throws an Error.\n     *\n     * Attention: This will always fail, if the `intWebStore()` method wasn't called before.\n     */\n    ensureJeepSqliteIsAvailable() {\n        if (this.jeepSqliteElement === null) {\n            throw new Error(`The jeep-sqlite element is not present in the DOM! Please check the @capacitor-community/sqlite documentation for instructions regarding the web platform.`);\n        }\n    }\n    ensureWebstoreIsOpen() {\n        if (!this.isWebStoreOpen) {\n            /**\n             * if (!this.isWebStoreOpen)\n              this.isWebStoreOpen = await this.jeepSqliteElement.isStoreOpen();\n             */\n            throw new Error('WebStore is not open yet. You have to call \"initWebStore()\" first.');\n        }\n    }\n    ////////////////////////////////////\n    ////// UNIMPLEMENTED METHODS\n    ////////////////////////////////////\n    async getUrl() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async getMigratableDbList(options) {\n        console.log('getMigratableDbList', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async addSQLiteSuffix(options) {\n        console.log('addSQLiteSuffix', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async deleteOldDatabases(options) {\n        console.log('deleteOldDatabases', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async moveDatabasesAndAddSuffix(options) {\n        console.log('moveDatabasesAndAddSuffix', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isSecretStored() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async setEncryptionSecret(options) {\n        console.log('setEncryptionSecret', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async changeEncryptionSecret(options) {\n        console.log('changeEncryptionSecret', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async clearEncryptionSecret() {\n        console.log('clearEncryptionSecret');\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async checkEncryptionSecret(options) {\n        console.log('checkEncryptionPassPhrase', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async getNCDatabasePath(options) {\n        console.log('getNCDatabasePath', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async createNCConnection(options) {\n        console.log('createNCConnection', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async closeNCConnection(options) {\n        console.log('closeNCConnection', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isNCDatabase(options) {\n        console.log('isNCDatabase', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isDatabaseEncrypted(options) {\n        console.log('isDatabaseEncrypted', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isInConfigEncryption() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isInConfigBiometricAuth() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async loadExtension(options) {\n        console.log('loadExtension', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async enableLoadExtension(options) {\n        console.log('enableLoadExtension', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n}\n//# sourceMappingURL=web.js.map"],"file":"assets/@capacitor-community-MIMArbib.js"}