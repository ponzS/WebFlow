{"version":3,"file":"AiSetting-legacy-DS_oL0rg.js","sources":["../../src/pages/AiSetting.vue"],"sourcesContent":["<template>\n    <ion-page>\n      <ion-header>\n        <ion-toolbar>\n          <ion-buttons slot=\"start\">\n            <ion-back-button color=\"dark\"></ion-back-button>\n          </ion-buttons>\n          <ion-title>AI Auto-Reply Configuration</ion-title>\n          <ion-buttons slot=\"end\">\n            <ion-button @click=\"fetchModels1\">\n              <ion-icon :icon=\"refreshOutline\"></ion-icon>\n            </ion-button>\n          </ion-buttons>\n        </ion-toolbar>\n      </ion-header>\n      <ion-content :fullscreen=\"true\">\n        <div class=\"flex flex-col h-full\">\n          <!-- Global Auto-Reply Toggle -->\n          <ion-item class=\"ion-padding\">\n            <ion-label>Enable AI Auto-Reply</ion-label>\n            <ion-toggle v-model=\"isAutoReplyEnabled\" @ionChange=\"toggleGlobalAutoReply\"></ion-toggle>\n          </ion-item>\n  \n          <!-- Buddy-Specific Auto-Reply -->\n          <ion-item class=\"ion-padding\">\n            <ion-label>Auto-Reply for Buddies</ion-label>\n            <ion-button slot=\"end\" fill=\"clear\" @click=\"showBuddyModal = true\">\n              <ion-icon :icon=\"peopleOutline\"></ion-icon>\n            </ion-button>\n          </ion-item>\n  \n          <!-- Buddy Selection Modal -->\n          <ion-modal :is-open=\"showBuddyModal\" @didDismiss=\"showBuddyModal = false\">\n            <ion-header>\n              <ion-toolbar>\n                <ion-title>Select Buddies for Auto-Reply</ion-title>\n                <ion-buttons slot=\"end\">\n                  <ion-button @click=\"showBuddyModal = false\">Close</ion-button>\n                </ion-buttons>\n              </ion-toolbar>\n            </ion-header>\n            <ion-content class=\"ion-padding\">\n              <ion-list>\n                <ion-item v-for=\"buddy in buddyList\" :key=\"buddy.pub\">\n                  <ion-label>{{ getAliasRealtime(buddy.pub) || buddy.pub.slice(0, 8) }}</ion-label>\n                  <ion-toggle\n                    :checked=\"enabledBuddies.includes(buddy.pub)\"\n                    @ionChange=\"toggleBuddyAutoReply(buddy.pub, $event.detail.checked)\"\n                  ></ion-toggle>\n                </ion-item>\n              </ion-list>\n            </ion-content>\n          </ion-modal>\n  \n          <!-- Model Selection and Settings -->\n          <ion-item class=\"ion-padding\">\n            <ion-label>Selected Model: {{ conversationModel || 'None' }}</ion-label>\n            <ion-select\n              v-model=\"conversationModel\"\n              placeholder=\"Select a model\"\n              interface=\"popover\"\n              @ionChange=\"updateSettings\"\n            >\n              <ion-select-option v-for=\"model in models\" :key=\"model\" :value=\"model\">\n                {{ model }}\n              </ion-select-option>\n            </ion-select>\n            <ion-button slot=\"end\" fill=\"clear\" @click=\"showSettings = true\">\n              <ion-icon :icon=\"settingsOutline\"></ion-icon>\n            </ion-button>\n          </ion-item>\n  \n          <!-- Settings Modal -->\n          <ion-modal :is-open=\"showSettings\" @didDismiss=\"showSettings = false\">\n            <ion-header>\n              <ion-toolbar>\n                <ion-title>AI Settings</ion-title>\n                <ion-buttons slot=\"end\">\n                  <ion-button @click=\"showSettings = false\">Close</ion-button>\n                </ion-buttons>\n              </ion-toolbar>\n            </ion-header>\n            <ion-content class=\"ion-padding\">\n              <ion-item>\n                <ion-label>Mode</ion-label>\n                <ion-select v-model=\"conversationMode\" placeholder=\"Select mode\" @ionChange=\"updateSettings\">\n                  <ion-select-option value=\"chat\">Chat</ion-select-option>\n                  <ion-select-option value=\"generate\">Generate</ion-select-option>\n                </ion-select>\n              </ion-item>\n              <ion-item>\n                <ion-label>Stream</ion-label>\n                <ion-toggle v-model=\"conversationStream\" @ionChange=\"updateSettings\"></ion-toggle>\n              </ion-item>\n              <ion-item>\n                <ion-label>Reply Delay (ms)</ion-label>\n                <ion-input\n                  type=\"number\"\n                  v-model=\"replyDelay\"\n                  placeholder=\"Enter delay in milliseconds\"\n                  @ionChange=\"updateSettings\"\n                ></ion-input>\n              </ion-item>\n            </ion-content>\n          </ion-modal>\n  \n          <!-- Other API Tests -->\n          <ion-accordion-group class=\"ion-padding\">\n            <!-- Create Model -->\n            <ion-accordion value=\"create\">\n              <ion-item slot=\"header\">\n                <ion-label>Create Model</ion-label>\n              </ion-item>\n              <div slot=\"content\">\n                <ion-item>\n                  <ion-label>Name</ion-label>\n                  <ion-input v-model=\"createModelName\" placeholder=\"Enter model name\"></ion-input>\n                </ion-item>\n                <ion-item>\n                  <ion-label>Modelfile</ion-label>\n                  <ion-textarea v-model=\"createModelfile\" placeholder=\"Enter modelfile content\"></ion-textarea>\n                </ion-item>\n                <ion-item>\n                  <ion-label>Stream</ion-label>\n                  <ion-toggle v-model=\"createStream\"></ion-toggle>\n                </ion-item>\n                <ion-button @click=\"createModel\">Create Model</ion-button>\n                <ion-text v-if=\"createResponse\" class=\"block mt-2\">{{ createResponse }}</ion-text>\n              </div>\n            </ion-accordion>\n  \n            <!-- Delete Model -->\n            <ion-accordion value=\"delete\">\n              <ion-item slot=\"header\">\n                <ion-label>Delete Model</ion-label>\n              </ion-item>\n              <div slot=\"content\">\n                <ion-item>\n                  <ion-label>Model Name</ion-label>\n                  <ion-input v-model=\"deleteModelName\" placeholder=\"Enter model name\"></ion-input>\n                </ion-item>\n                <ion-button @click=\"deleteModel\">Delete Model</ion-button>\n                <ion-text v-if=\"deleteResponse\" class=\"block mt-2\">{{ deleteResponse }}</ion-text>\n              </div>\n            </ion-accordion>\n  \n            <!-- Copy Model -->\n            <ion-accordion value=\"copy\">\n              <ion-item slot=\"header\">\n                <ion-label>Copy Model</ion-label>\n              </ion-item>\n              <div slot=\"content\">\n                <ion-item>\n                  <ion-label>Source</ion-label>\n                  <ion-input v-model=\"copySource\" placeholder=\"Enter source model\"></ion-input>\n                </ion-item>\n                <ion-item>\n                  <ion-label>Destination</ion-label>\n                  <ion-input v-model=\"copyDestination\" placeholder=\"Enter destination model\"></ion-input>\n                </ion-item>\n                <ion-button @click=\"copyModel\">Copy Model</ion-button>\n                <ion-text v-if=\"copyResponse\" class=\"block mt-2\">{{ copyResponse }}</ion-text>\n              </div>\n            </ion-accordion>\n  \n            <!-- Show Model Info -->\n            <ion-accordion value=\"show\">\n              <ion-item slot=\"header\">\n                <ion-label>Show Model Info</ion-label>\n              </ion-item>\n              <div slot=\"content\">\n                <ion-item>\n                  <ion-label>Model Name</ion-label>\n                  <ion-input v-model=\"showModelName\" placeholder=\"Enter model name\"></ion-input>\n                </ion-item>\n                <ion-button @click=\"showModel\">Show Info</ion-button>\n                <ion-text v-if=\"showResponse\" class=\"block mt-2\">{{ JSON.stringify(showResponse) }}</ion-text>\n              </div>\n            </ion-accordion>\n  \n            <!-- Pull Model -->\n            <ion-accordion value=\"pull\">\n              <ion-item slot=\"header\">\n                <ion-label>Pull Model</ion-label>\n              </ion-item>\n              <div slot=\"content\">\n                <ion-item>\n                  <ion-label>Model Name</ion-label>\n                  <ion-input v-model=\"pullModelName\" placeholder=\"Enter model name\"></ion-input>\n                </ion-item>\n                <ion-item>\n                  <ion-label>Stream</ion-label>\n                  <ion-toggle v-model=\"pullStream\"></ion-toggle>\n                </ion-item>\n                <ion-button @click=\"pullModel\">Pull Model</ion-button>\n                <ion-text v-if=\"pullResponse\" class=\"block mt-2\">{{ pullResponse }}</ion-text>\n              </div>\n            </ion-accordion>\n  \n            <!-- Push Model -->\n            <ion-accordion value=\"push\">\n              <ion-item slot=\"header\">\n                <ion-label>Push Model</ion-label>\n              </ion-item>\n              <div slot=\"content\">\n                <ion-item>\n                  <ion-label>Model Name</ion-label>\n                  <ion-input v-model=\"pushModelName\" placeholder=\"Enter model name\"></ion-input>\n                </ion-item>\n                <ion-item>\n                  <ion-label>Stream</ion-label>\n                  <ion-toggle v-model=\"pushStream\"></ion-toggle>\n                </ion-item>\n                <ion-button @click=\"pushModel\">Push Model</ion-button>\n                <ion-text v-if=\"pushResponse\" class=\"block mt-2\">{{ pushResponse }}</ion-text>\n              </div>\n            </ion-accordion>\n  \n            <!-- Generate Embeddings -->\n            <ion-accordion value=\"embeddings\">\n              <ion-item slot=\"header\">\n                <ion-label>Generate Embeddings</ion-label>\n              </ion-item>\n              <div slot=\"content\">\n                <ion-item>\n                  <ion-label>Model</ion-label>\n                  <ion-input v-model=\"embedModel\" placeholder=\"Enter model name\"></ion-input>\n                </ion-item>\n                <ion-item>\n                  <ion-label>Prompt</ion-label>\n                  <ion-textarea v-model=\"embedPrompt\" placeholder=\"Enter prompt\"></ion-textarea>\n                </ion-item>\n                <ion-button @click=\"generateEmbeddings\">Generate Embeddings</ion-button>\n                <ion-text v-if=\"embedResponse\" class=\"block mt-2\">{{ JSON.stringify(embedResponse) }}</ion-text>\n              </div>\n            </ion-accordion>\n          </ion-accordion-group>\n        </div>\n      </ion-content>\n    </ion-page>\n  </template>\n  \n  <script setup lang=\"ts\">\n  import { ref, computed, onMounted } from 'vue';\n  import {\n    IonPage, IonHeader, IonToolbar, IonTitle, IonContent, IonButtons, IonButton,\n    IonIcon, IonModal, IonItem, IonLabel, IonInput, IonSelect, IonSelectOption,\n    IonToggle, IonList, IonTextarea, IonAccordionGroup, IonAccordion, IonText,\n    IonBackButton, \n  } from '@ionic/vue';\n  import { settingsOutline, refreshOutline, peopleOutline } from 'ionicons/icons';\n  import { useAIAutoReply } from '@/composables/useAIAutoReply';\n  import { getTalkFlowCore } from '@/composables/TalkFlowCore';\n  import { fetchModels, generateReply } from '@/composables/ollamaService';\n  import { showToast } from '@/composables/useToast';\n  \n  const { storageServ, buddyList, getAliasRealtime } = getTalkFlowCore();\n  const aiAutoReply = useAIAutoReply(storageServ);\n  \n  // API Base URL\n  const API_URL = 'http://localhost:3939';\n  \n  // State\n  const isAutoReplyEnabled = ref(aiAutoReply.state.isEnabled);\n  const enabledBuddies = ref(aiAutoReply.state.enabledBuddies);\n  const conversationModel = ref(aiAutoReply.state.settings.model);\n  const conversationMode = ref(aiAutoReply.state.settings.mode);\n  const conversationStream = ref(aiAutoReply.state.settings.stream);\n  const replyDelay = ref(aiAutoReply.state.settings.replyDelay);\n  const showSettings = ref(false);\n  const showBuddyModal = ref(false);\n  const models = ref<string[]>([]);\n  \n  // State for Create Model\n  const createModelName = ref('');\n  const createModelfile = ref('');\n  const createStream = ref(false);\n  const createResponse = ref('');\n  \n  // State for Delete Model\n  const deleteModelName = ref('');\n  const deleteResponse = ref('');\n  \n  // State for Copy Model\n  const copySource = ref('');\n  const copyDestination = ref('');\n  const copyResponse = ref('');\n  \n  // State for Show Model Info\n  const showModelName = ref('');\n  const showResponse = ref<any>(null);\n  \n  // State for Pull Model\n  const pullModelName = ref('');\n  const pullStream = ref(false);\n  const pullResponse = ref('');\n  \n  // State for Push Model\n  const pushModelName = ref('');\n  const pushStream = ref(false);\n  const pushResponse = ref('');\n  \n  // State for Embeddings\n  const embedModel = ref('');\n  const embedPrompt = ref('');\n  const embedResponse = ref<any>(null);\n  \n  // Fetch Models\n  const fetchModels1 = async () => {\n    models.value = await fetchModels();\n    if (models.value.length && !conversationModel.value) {\n      conversationModel.value = models.value[0];\n      updateSettings();\n    }\n  };\n  \n  // Toggle Global Auto-Reply\n  const toggleGlobalAutoReply = async () => {\n    await aiAutoReply.toggleAutoReply(isAutoReplyEnabled.value);\n  };\n  \n  // Toggle Buddy Auto-Reply\n  const toggleBuddyAutoReply = async (buddyPub: string, enable: boolean) => {\n    await aiAutoReply.toggleBuddyAutoReply(buddyPub, enable);\n    enabledBuddies.value = aiAutoReply.state.enabledBuddies;\n  };\n  \n  // Update Settings\n  const updateSettings = async () => {\n    await aiAutoReply.updateSettings({\n      model: conversationModel.value,\n      mode: conversationMode.value,\n      stream: conversationStream.value,\n      replyDelay: Number(replyDelay.value),\n    });\n  };\n  \n  // Create Model\n  const createModel = async () => {\n    createResponse.value = '';\n    if (createStream.value) {\n      const eventSource = new EventSource(`${API_URL}/api/models/create`);\n      eventSource.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        createResponse.value += JSON.stringify(data) + '\\n';\n      };\n      eventSource.onerror = () => {\n        eventSource.close();\n        showToast('Error creating model', 'error');\n      };\n      await fetch(`${API_URL}/api/models/create`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          name: createModelName.value,\n          modelfile: createModelfile.value,\n          stream: true,\n        }),\n      });\n    } else {\n      try {\n        const response = await fetch(`${API_URL}/api/models/create`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            name: createModelName.value,\n            modelfile: createModelfile.value,\n          }),\n        });\n        const data = await response.json();\n        createResponse.value = JSON.stringify(data);\n        showToast('Model created successfully', 'success');\n      } catch (error) {\n        createResponse.value = 'Error creating model';\n        showToast('Error creating model', 'error');\n      }\n    }\n  };\n  \n  // Delete Model\n  const deleteModel = async () => {\n    try {\n      const response = await fetch(`${API_URL}/api/models/${deleteModelName.value}`, {\n        method: 'DELETE',\n      });\n      const data = await response.json();\n      deleteResponse.value = data.message || data.error;\n      showToast(data.message || 'Model deleted successfully', data.error ? 'error' : 'success');\n    } catch (error) {\n      deleteResponse.value = 'Error deleting model';\n      showToast('Error deleting model', 'error');\n    }\n  };\n  \n  // Copy Model\n  const copyModel = async () => {\n    try {\n      const response = await fetch(`${API_URL}/api/models/copy`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          source: copySource.value,\n          destination: copyDestination.value,\n        }),\n      });\n      const data = await response.json();\n      copyResponse.value = data.message || data.error;\n      showToast(data.message || 'Model copied successfully', data.error ? 'error' : 'success');\n    } catch (error) {\n      copyResponse.value = 'Error copying model';\n      showToast('Error copying model', 'error');\n    }\n  };\n  \n  // Show Model Info\n  const showModel = async () => {\n    try {\n      const response = await fetch(`${API_URL}/api/models/${showModelName.value}`);\n      const data = await response.json();\n      showResponse.value = data;\n      showToast('Model info retrieved successfully', 'success');\n    } catch (error) {\n      showResponse.value = { error: 'Error fetching model info' };\n      showToast('Error fetching model info', 'error');\n    }\n  };\n  \n  // Pull Model\n  const pullModel = async () => {\n    pullResponse.value = '';\n    if (pullStream.value) {\n      const eventSource = new EventSource(`${API_URL}/api/models/pull`);\n      eventSource.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        pullResponse.value += JSON.stringify(data) + '\\n';\n      };\n      eventSource.onerror = () => {\n        eventSource.close();\n        showToast('Error pulling model', 'error');\n      };\n      await fetch(`${API_URL}/api/models/pull`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          name: pullModelName.value,\n          stream: true,\n        }),\n      });\n    } else {\n      try {\n        const response = await fetch(`${API_URL}/api/models/pull`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            name: pullModelName.value,\n          }),\n        });\n        const data = await response.json();\n        pullResponse.value = JSON.stringify(data);\n        showToast('Model pulled successfully', 'success');\n      } catch (error) {\n        pullResponse.value = 'Error pulling model';\n        showToast('Error pulling model', 'error');\n      }\n    }\n  };\n  \n  // Push Model\n  const pushModel = async () => {\n    pushResponse.value = '';\n    if (pushStream.value) {\n      const eventSource = new EventSource(`${API_URL}/api/models/push`);\n      eventSource.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        pushResponse.value += JSON.stringify(data) + '\\n';\n      };\n      eventSource.onerror = () => {\n        eventSource.close();\n        showToast('Error pushing model', 'error');\n      };\n      await fetch(`${API_URL}/api/models/push`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          name: pushModelName.value,\n          stream: true,\n        }),\n      });\n    } else {\n      try {\n        const response = await fetch(`${API_URL}/api/models/push`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            name: pushModelName.value,\n          }),\n        });\n        const data = await response.json();\n        pushResponse.value = JSON.stringify(data);\n        showToast('Model pushed successfully', 'success');\n      } catch (error) {\n        pushResponse.value = 'Error pushing model';\n        showToast('Error pushing model', 'error');\n      }\n    }\n  };\n  \n  // Generate Embeddings\n  const generateEmbeddings = async () => {\n    try {\n      const response = await fetch(`${API_URL}/api/embeddings`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          model: embedModel.value,\n          prompt: embedPrompt.value,\n        }),\n      });\n      const data = await response.json();\n      embedResponse.value = data;\n      showToast('Embeddings generated successfully', 'success');\n    } catch (error) {\n      embedResponse.value = { error: 'Error generating embeddings' };\n      showToast('Error generating embeddings', 'error');\n    }\n  };\n  \n  // Initialize\n  onMounted(() => {\n    fetchModels();\n  });\n  </script>\n  \n  <style scoped>\n  ion-list {\n    background: transparent;\n  }\n  ion-text.block {\n    display: block;\n    white-space: pre-wrap;\n  }\n  </style>"],"names":["API_URL","_getTalkFlowCore","getTalkFlowCore","storageServ","buddyList","getAliasRealtime","aiAutoReply","useAIAutoReply","isAutoReplyEnabled","ref","state","isEnabled","enabledBuddies","conversationModel","settings","model","conversationMode","mode","conversationStream","stream","replyDelay","showSettings","showBuddyModal","models","createModelName","createModelfile","createStream","createResponse","deleteModelName","deleteResponse","copySource","copyDestination","copyResponse","showModelName","showResponse","pullModelName","pullStream","pullResponse","pushModelName","pushStream","pushResponse","embedModel","embedPrompt","embedResponse","fetchModels1","_callee","_regeneratorRuntime","wrap","_context","prev","next","fetchModels","value","sent","length","updateSettings","stop","toggleGlobalAutoReply","_callee2","_callee2$","_context2","toggleAutoReply","toggleBuddyAutoReply","_ref3","_asyncToGenerator","mark","_callee3","buddyPub","enable","_context3","_x","_x2","apply","this","arguments","_callee4","_callee4$","_context4","Number","createModel","_callee5","eventSource","response","data","_context5","EventSource","concat","onmessage","event","JSON","parse","stringify","onerror","close","showToast","fetch","method","headers","body","name","modelfile","json","t0","deleteModel","_callee6","_context6","message","error","copyModel","_callee7","_context7","source","destination","showModel","_callee8","_callee8$","_context8","pullModel","_callee9","_context9","pushModel","_callee10","_context10","generateEmbeddings","_callee11","_context11","prompt","onMounted"],"mappings":"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"}